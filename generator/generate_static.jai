#run {
    target := get_build_options();
    target.output_type = .NO_OUTPUT;
    set_build_options(target);

    print(":: Generating static module...\n");

    builder: String_Builder;

    filenames :: string.[
        "generated_windows.jai",
        "generated_linux.jai",
        // "generated_macos.jai", // @Todo(Judah): Needs to be done on a Mac.
    ];

    processed_platforms := 0;

    for filenames {
        file := it;

        if !file_exists(file) {
            parent_file := tprint("../%", it);
            if !file_exists(parent_file) {
                print(":: Generated file '%' doesn't exist in the current or parent directories! Skipping...", parent_file);
                continue;
            }

            file = parent_file;
        }

        contents, read_ok := read_entire_file(file);
        if !read_ok {
            print(":: Unable to read file '%'! Skipping...\n", file);
            continue;
        }

        platform := file;
        while platform.count {
            if platform[0] == #char "_" {
                platform.data  += 1;
                platform.count -= 1;

                dot_index := 0;
                for 0..platform.count - 1 {
                    if platform[it] == #char "." {
                        dot_index = it;
                        break;
                    }
                }

                platform.count = dot_index;
                break;
            }

            platform.data  += 1;
            platform.count -= 1;
        }

        if processed_platforms <= 0 {
            append(*builder, "    #if OS == ");
        }
        else {
            append(*builder, "    else #if OS == ");
        }

        if platform == {
            case "windows";
                append(*builder, ".WINDOWS {\n");
            case "linux";
                append(*builder, ".LINUX {\n");
            case "macos";
                append(*builder, ".MACOS {\n");
            case;
                compiler_report(tprint("Unknown platform: %", platform));
        }

        lines: []string = ---;
        if platform == "windows" {
            lines = split(contents, "\r\n");
            // If line endings are changed on windows, this will handle it.
            if lines.count <= 1 lines = split(contents, "\n");
        }
        else {
            lines = split(contents, "\n");
        }

        skipped := 0;

        for lines {
            line := trim(it);
            if line.count <= 1 || starts_with(line, "//") || starts_with(line, "#assert") {
                skipped += 1;
                continue;
            }

            print_to_builder(*builder, "        %", line);
            if it_index + skipped < lines.count - 1 append(*builder, "\n");
        }

        append(*builder, "    }");
        if it_index < filenames.count - 1 append(*builder, #char "\n");

        processed_platforms += 1;
    }

    if processed_platforms <= 0 return;
    if !write_entire_file("generated_static.jai", tprint(MODULE_TEMPLATE, builder_to_string(*builder))) {
        print("Unable to created generated file! Do you have valid permissions?\n");
        return;
    }

    print(":: Generated static module!\n");
}

MODULE_TEMPLATE :: #string END
// This file was automatically generated by 'generator/generate_static.jai'
// This file can be manually #loaded and used like the module version.

c :: struct {
%
}
END;

#import "Basic";
#import "File";
#import "File_Utilities";
#import "String";
#import "Compiler";